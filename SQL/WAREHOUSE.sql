USE CEID_RESCUE_PROGRAM;

CREATE TABLE IF NOT EXISTS CATEGORIES(CATEGORY_NAME VARCHAR(50) NOT NULL PRIMARY KEY);
                                    
CREATE TABLE IF NOT EXISTS PRODUCTS(
									ID INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
                                    CATEGORY VARCHAR(50) NOT NULL,
                                    PRODUCT_NAME VARCHAR(50) NOT NULL,
                                    
                                    FOREIGN KEY (CATEGORY) REFERENCES CATEGORIES(CATEGORY_NAME));
                                    
CREATE TABLE IF NOT EXISTS DETAILS_OF_PRODUCTS(
												ID INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
                                                PRODUCT INT NOT NULL,
                                                DETAIL_NAME VARCHAR(20) NOT NULL,
                                                DETAIL_VALUE VARCHAR(20) NOT NULL,
                                                
                                                FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS(ID));

CREATE TABLE IF NOT EXISTS WAREHOUSE(
									ID INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
                                    PRODUCT INT NOT NULL,
                                    AMOUNT INT NOT NULL DEFAULT 0,
                                    
                                    FOREIGN KEY(PRODUCT) REFERENCES PRODUCTS(ID));

DELIMITER $$
CREATE PROCEDURE ADD_NEW_PRODUCT(
								IN p_CATEGORY VARCHAR(50),
                                IN p_PRODUCT VARCHAR(50),
                                IN p_DETAIL_NAME VARCHAR(50),
                                IN p_DETAIL_VALUE VARCHAR(50))
BEGIN
	DECLARE FOUND_CATEGORY VARCHAR(50) DEFAULT NULL;
	DECLARE PRODUCT_ID INT;
    
	SELECT CATEGORY_NAME INTO FOUND_CATEGORY
	FROM CATEGORIES
	WHERE CATEGORY_NAME = p_CATEGORY;

	SELECT ID INTO PRODUCT_ID
	FROM PRODUCTS
	WHERE PRODUCT_NAME = p_PRODUCT;

	START TRANSACTION;

	IF FOUND_CATEGORY IS NULL THEN
		INSERT INTO CATEGORIES VALUE (p_CATEGORY);
	END IF;

	IF PRODUCT_ID IS NULL THEN
		INSERT INTO PRODUCTS(CATEGORY, PRODUCT_NAME) VALUES (p_CATEGORY, p_PRODUCT);
		
		SELECT ID INTO PRODUCT_ID
		FROM PRODUCTS
		WHERE PRODUCT_NAME = p_PRODUCT;
	END IF;

	INSERT INTO DETAILS_OF_PRODUCTS(PRODUCT, DETAIL_NAME, DETAIL_VALUE) VALUE (PRODUCT_ID, p_DETAIL_NAME, p_DETAIL_VALUE);

	COMMIT;

END$$

CREATE PROCEDURE ADD_PRODUCTS_IN_WAREHOUSE(
										IN p_PRODUCT VARCHAR(50), 
										IN p_CATEGORY VARCHAR(50),
                                        IN p_CATEGORY_DESCRIPTION VARCHAR(200),
										IN p_AMOUNT INT)
BEGIN
	DECLARE CATEGORY_ID INT;
    DECLARE PRODUCT_ID INT;
    DECLARE ID_WAREHOUSE INT;
    DECLARE STORED_AMOUNT INT;
	
    SELECT ID INTO CATEGORY_ID
    FROM CATEGORIES
    WHERE CATEGORY_NAME = p_CATEGORY;
    
    SELECT ID INTO PRODUCT_ID
    FROM PRODUCTS
    WHERE PRODUCT_NAME = p_PRODUCT;
    
    IF CATEGORY_ID IS NULL THEN
		INSERT INTO CATEGORIES(CATEGORY_NAME, DESCRIPTION) VALUES (p_CATEGORY, p_CATEGORY_DESCRIPTION);
        SELECT ID INTO CATEGORY_ID
		FROM CATEGORIES
		WHERE CATEGORY_NAME = p_CATEGORY;
    END IF;
    
    IF PRODUCT_ID IS NULL THEN
		INSERT INTO PRODUCTS(CATEGORY, PRODUCT_NAME) VALUES(CATEGORY_ID, p_PRODUCT);
        SELECT ID INTO PRODUCT_ID
		FROM PRODUCTS
		WHERE PRODUCT_NAME = p_PRODUCT;
    END IF;

	SELECT ID INTO ID_WAREHOUSE
    FROM WAREHOUSE
    WHERE PRODUCT = PRODUCT_ID;
    
    IF ID_WAREHOUSE IS NULL THEN 
		INSERT INTO WAREHOUSE(PRODUCT, AMOUNT) VALUES (PRODUCT_ID, p_AMOUNT);
	ELSE
		SELECT AMOUNT INTO STORED_AMOUNT
        FROM WAREHOUSE
        WHERE ID = ID_WAREHOUSE; 
        
        
        UPDATE WAREHOUSE
        SET AMOUNT = p_AMOUNT + STORED_AMOUNT
        WHERE ID = ID_WAREHOUSE;
	END IF;

END$$
DELIMITER ;

